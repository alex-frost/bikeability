require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SchoolEmailTemplatesController do
  before do
    sign_in
  end
  # This should return the minimal set of attributes required to create a valid
  # SchoolEmailTemplate. As you add validations to SchoolEmailTemplate, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "body" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SchoolEmailTemplatesController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  describe "GET edit" do
    it "assigns the requested school_email_template as @school_email_template" do
      school_email_template = SchoolEmailTemplate.create! valid_attributes
      get :edit, {:id => school_email_template.to_param}, valid_session
      assigns(:school_email_template).should eq(school_email_template)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested school_email_template" do
        school_email_template = SchoolEmailTemplate.create! valid_attributes
        # Assuming there are no other school_email_templates in the database, this
        # specifies that the SchoolEmailTemplate created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        SchoolEmailTemplate.any_instance.should_receive(:update).with({ "body" => "MyString" })
        put :update, {:id => school_email_template.to_param, :school_email_template => { "body" => "MyString" }}, valid_session
      end

      it "assigns the requested school_email_template as @school_email_template" do
        school_email_template = SchoolEmailTemplate.create! valid_attributes
        put :update, {:id => school_email_template.to_param, :school_email_template => valid_attributes}, valid_session
        assigns(:school_email_template).should eq(school_email_template)
      end

    end

    describe "with invalid params" do
      it "assigns the school_email_template as @school_email_template" do
        school_email_template = SchoolEmailTemplate.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SchoolEmailTemplate.any_instance.stub(:save).and_return(false)
        put :update, {:id => school_email_template.to_param, :school_email_template => { "body" => "invalid value" }}, valid_session
        assigns(:school_email_template).should eq(school_email_template)
      end

      it "re-renders the 'edit' template" do
        school_email_template = SchoolEmailTemplate.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SchoolEmailTemplate.any_instance.stub(:save).and_return(false)
        put :update, {:id => school_email_template.to_param, :school_email_template => { "body" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

end
