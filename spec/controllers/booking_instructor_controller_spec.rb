require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BookingInstructorsController do


  # This should return the minimal set of attributes required to create a valid
  # School. As you add validations to School, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "school_name" => "MyString" } }
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SchoolsController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  describe "GET edit" do
    before(:each) do
      @school = School.create! valid_attributes
      @instructor1 = Instructor.create!(name: "Chris", email: "chris@example.com")
      @instructor2 = Instructor.create!(name: "Gemma", email: "gemma@example.com")
      @instructor3 = Instructor.create!(name: "Amy", email: "amy@example.com")
      @booking = Booking.create!(school: @school, instructor1_id: @instructor1.id, instructor2_id: @instructor2.id, num_children: 10)
    end

    it "assigns the requested booking instructor school as @school" do
      get :edit, {:id => @booking.to_param, instructor_id: @instructor3.to_param}
      response.should redirect_to @booking
      flash[:notice].should eql("#{@instructor3.name} is not on this booking")
    end

    it "assigns the other instructor on the requested booking" do
      get :edit, {:id => @booking.to_param, instructor_id: @instructor1.to_param}
      assigns(:other_instructor).should eq(@instructor2)
    end

    it "assigns the instructor on the requested booking" do
      get :edit, {:id => @booking.to_param, instructor_id: @instructor1.to_param}
      assigns(:instructor_available).should eq(:instructor1_available)
    end


  end

end
